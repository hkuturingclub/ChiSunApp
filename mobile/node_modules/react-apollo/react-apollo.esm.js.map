{"version":3,"file":"react-apollo.esm.js","sources":["../src/ApolloContext.ts","../src/ApolloConsumer.tsx","../src/ApolloProvider.tsx","../src/parser.ts","../src/component-utils.tsx","../src/utils/shallowEqual.ts","../src/Query.tsx","../src/Mutation.tsx","../src/Subscriptions.tsx","../src/hoc-utils.tsx","../src/query-hoc.tsx","../src/mutation-hoc.tsx","../src/subscription-hoc.tsx","../src/graphql.tsx","../src/withApollo.tsx","../src/getDataFromTree.ts","../src/renderToStringWithData.ts","../src/utils/flowRight.ts"],"sourcesContent":["import * as React from 'react';\nimport ApolloClient from 'apollo-client';\nimport { DocumentNode } from 'graphql';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<Object>;\n  operations?: Map<string, { query: DocumentNode; variables: any }>;\n}\n\nexport const ApolloContext = React.createContext &&\n  React.createContext<ApolloContextValue | undefined>(undefined)\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport ApolloClient from 'apollo-client';\nimport { ApolloContext } from './ApolloContext';\nimport { InvariantError } from 'ts-invariant';\n\nexport interface ApolloConsumerProps {\n  children: (client: ApolloClient<any>) => React.ReactElement<any> | null;\n}\n\nconst ApolloConsumer: React.StatelessComponent<ApolloConsumerProps> =\n  (props, legacyContext) => {\n    function finish(context: any) {\n      if (!context || !context.client) {\n        throw new InvariantError(\n          'Could not find \"client\" in the context of ApolloConsumer. ' +\n          'Wrap the root component in an <ApolloProvider>.'\n        );\n      }\n      return props.children(context.client);\n    }\n\n    return ApolloContext ? (\n      <ApolloContext.Consumer>\n        {finish}\n      </ApolloContext.Consumer>\n    ) : (\n      // Fall back to legacy context API if React.createContext not available.\n      finish(legacyContext)\n    );\n  };\n\nApolloConsumer.contextTypes = {\n  client: PropTypes.object.isRequired,\n};\n\nApolloConsumer.propTypes = {\n  children: PropTypes.func.isRequired,\n};\n\nexport default ApolloConsumer;\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport ApolloClient from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { ApolloContext } from './ApolloContext';\n\nimport { invariant } from 'ts-invariant';\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: React.ReactNode;\n}\n\nexport default class ApolloProvider<TCache> extends Component<ApolloProviderProps<TCache>> {\n  static propTypes = {\n    client: PropTypes.object.isRequired,\n    children: PropTypes.node.isRequired,\n  };\n\n  static childContextTypes = {\n    client: PropTypes.object.isRequired,\n    operations: PropTypes.object,\n  };\n\n  private operations: Map<string, { query: DocumentNode; variables: any }> = new Map();\n\n  constructor(props: ApolloProviderProps<TCache>, context: any) {\n    super(props, context);\n\n    invariant(\n      props.client,\n      'ApolloProvider was not passed a client instance. Make ' +\n        'sure you pass in your client via the \"client\" prop.',\n    );\n\n    // we have to attach to the client since you could have multiple\n    // providers\n    // XXX this is backwards compat and will be removed in 3.0\n    if (!(props.client as any).__operations_cache__) {\n      (props.client as any).__operations_cache__ = this.operations;\n    }\n  }\n\n  getChildContext() {\n    return {\n      client: this.props.client,\n      operations: (this.props.client as any).__operations_cache__,\n    };\n  }\n\n  render() {\n    return ApolloContext ? (\n      <ApolloContext.Provider value={this.getChildContext()}>\n        {this.props.children}\n      </ApolloContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n","import {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from 'graphql';\n\nimport { invariant } from 'ts-invariant';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\n// the parser is mainly a safety check for the HOC\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n  // variables\n  let variables, type, name;\n\n  /*\n\n    Saftey checks for proper usage of react-apollo\n\n  */\n  invariant(\n    !!document && !!document.kind,\n    // tslint:disable-line\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition',\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'OperationDefinition' && x.operation === 'query',\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'OperationDefinition' && x.operation === 'mutation',\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'OperationDefinition' && x.operation === 'subscription',\n  );\n\n  invariant(\n    !fragments.length || (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`,\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    // tslint:disable-line\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    // tslint:disable-line\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n","import ApolloClient from 'apollo-client';\nimport { invariant } from 'ts-invariant';\n\nexport interface CommonComponentProps {\n  client?: ApolloClient<Object>;\n}\n\nexport interface CommonComponentContext {\n  client?: ApolloClient<Object>;\n}\n\nexport function getClient(\n  props: CommonComponentProps,\n  context: CommonComponentContext,\n): ApolloClient<Object> {\n  const client = props.client || context.client;\n\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as a prop. ' +\n      'Wrap the root component in an <ApolloProvider>, or pass an ' +\n      'ApolloClient instance in via props.',\n  );\n\n  return client as ApolloClient<Object>;\n}\n","const { hasOwnProperty } = Object.prototype;\n\nfunction is(x: any, y: any) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  }\n  return x !== x && y !== y;\n}\n\nfunction isObject(obj: any): obj is { [key: string]: any } {\n  return obj !== null && typeof obj === \"object\";\n}\n\nexport default function shallowEqual(objA: any, objB: any) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (!isObject(objA) || !isObject(objB)) {\n    return false;\n  }\n\n  const keys = Object.keys(objA);\n\n  if (keys.length !== Object.keys(objB).length) {\n    return false;\n  }\n\n  return keys.every(\n    key => hasOwnProperty.call(objB, key) && is(objA[key], objB[key]),\n  );\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport ApolloClient, {\n  ObservableQuery,\n  ApolloError,\n  ApolloQueryResult,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  ApolloCurrentResult\n} from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { ZenObservable } from 'zen-observable-ts';\nimport { OperationVariables, QueryControls, QueryOpts } from './types';\nimport { parser, DocumentType, IDocumentDefinition } from './parser';\nimport { getClient } from './component-utils';\nimport { RenderPromises } from './getDataFromTree';\n\nimport isEqual from 'lodash.isequal';\nimport shallowEqual from './utils/shallowEqual';\nimport { invariant } from 'ts-invariant';\n\nexport type ObservableQueryFields<TData, TVariables> = Pick<\n  ObservableQuery<TData, TVariables>,\n  'startPolling' | 'stopPolling' | 'subscribeToMore' | 'updateQuery' | 'refetch' | 'variables'\n> & {\n  fetchMore: (<K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> & FetchMoreOptions<TData, TVariables>,\n  ) => Promise<ApolloQueryResult<TData>>) &\n    (<TData2, TVariables2, K extends keyof TVariables2>(\n      fetchMoreOptions: { query?: DocumentNode } & FetchMoreQueryOptions<TVariables2, K> &\n        FetchMoreOptions<TData2, TVariables2>,\n    ) => Promise<ApolloQueryResult<TData2>>);\n};\n\nfunction observableQueryFields<TData, TVariables>(\n  observable: ObservableQuery<TData, TVariables>,\n): ObservableQueryFields<TData, TVariables> {\n  const fields = {\n    variables: observable.variables,\n    refetch: observable.refetch.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable),\n  };\n  // TODO: Need to cast this because we improved the type of `updateQuery` to be parametric\n  // on variables, while the type in Apollo client just has object.\n  // Consider removing this when that is properly typed\n  return fields as ObservableQueryFields<TData, TVariables>;\n}\n\nexport interface QueryResult<TData = any, TVariables = OperationVariables>\n  extends ObservableQueryFields<TData, TVariables> {\n  client: ApolloClient<any>;\n  // we create an empty object to make checking for data\n  // easier for consumers (i.e. instead of data && data.user\n  // you can just check data.user) this also makes destructring\n  // easier (i.e. { data: { user } })\n  // however, this isn't realy possible with TypeScript that\n  // I'm aware of. So intead we enforce checking for data\n  // like so result.data!.user. This tells TS to use TData\n  // XXX is there a better way to do this?\n  data: TData | undefined;\n  error?: ApolloError;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n}\n\nexport interface QueryProps<TData = any, TVariables = OperationVariables> extends QueryOpts<TVariables> {\n  children: (result: QueryResult<TData, TVariables>) => React.ReactNode;\n  query: DocumentNode;\n  displayName?: string;\n  skip?: boolean;\n  onCompleted?: (data: TData) => void;\n  onError?: (error: ApolloError) => void;\n}\n\nexport interface QueryContext {\n  client?: ApolloClient<Object>;\n  operations?: Map<string, { query: DocumentNode; variables: any }>;\n  renderPromises?: RenderPromises;\n}\n\nexport default class Query<TData = any, TVariables = OperationVariables> extends React.Component<\n  QueryProps<TData, TVariables>\n> {\n  static contextTypes = {\n    client: PropTypes.object,\n    operations: PropTypes.object,\n    renderPromises: PropTypes.object,\n  };\n\n  static propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n    returnPartialData: PropTypes.bool,\n  };\n\n  context: QueryContext | undefined;\n\n  private client: ApolloClient<Object>;\n\n  // request / action storage. Note that we delete querySubscription if we\n  // unsubscribe but never delete queryObservable once it is created. We\n  // only delete queryObservable when we unmount the component.\n  private queryObservable?: ObservableQuery<TData, TVariables> | null;\n  private querySubscription?: ZenObservable.Subscription;\n  private refetcherQueue?: {\n    args: any;\n    resolve: (value?: any | PromiseLike<any>) => void;\n    reject: (reason?: any) => void;\n  };\n\n  private hasMounted: boolean = false;\n  private operation?: IDocumentDefinition;\n  private lastRenderedResult: ApolloQueryResult<TData> | null = null;\n\n  constructor(props: QueryProps<TData, TVariables>, context: QueryContext) {\n    super(props, context);\n\n    this.client = getClient(props, context);\n    this.initializeQueryObservable(props);\n  }\n\n  // For server-side rendering (see getDataFromTree.ts)\n  fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    if (this.props.skip) return false;\n\n    // pull off react options\n    const {\n      children,\n      ssr,\n      displayName,\n      skip,\n      client,\n      onCompleted,\n      onError,\n      partialRefetch,\n      ...opts\n    } = this.props;\n\n    let { fetchPolicy } = opts;\n    if (ssr === false) return false;\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\n      fetchPolicy = 'cache-first'; // ignore force fetch in SSR;\n    }\n\n    const observable = this.client.watchQuery({\n      ...opts,\n      fetchPolicy,\n    });\n\n    // Register the SSR observable, so it can be re-used once the value comes back.\n    if (this.context && this.context.renderPromises) {\n      this.context.renderPromises.registerSSRObservable(this, observable);\n    }\n\n    const result = this.queryObservable!.currentResult();\n\n    return result.loading ? observable.result() : false;\n  }\n\n  componentDidMount() {\n    this.hasMounted = true;\n    if (this.props.skip) return;\n\n    this.startQuerySubscription();\n    if (this.refetcherQueue) {\n      const { args, resolve, reject } = this.refetcherQueue;\n      this.queryObservable!.refetch(args)\n        .then(resolve)\n        .catch(reject);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: QueryProps<TData, TVariables>, nextContext: QueryContext) {\n    // the next render wants to skip\n    if (nextProps.skip && !this.props.skip) {\n      this.queryObservable!.resetLastResults();\n      this.removeQuerySubscription();\n      return;\n    }\n\n    const nextClient = getClient(nextProps, nextContext);\n\n    if (shallowEqual(this.props, nextProps) && this.client === nextClient) {\n      return;\n    }\n\n    if (this.client !== nextClient) {\n      this.client = nextClient;\n      this.removeQuerySubscription();\n      this.queryObservable = null;\n    }\n\n    if (this.props.query !== nextProps.query) {\n      this.queryObservable!.resetLastResults();\n      this.removeQuerySubscription();\n    }\n\n    this.updateQuery(nextProps);\n    if (nextProps.skip) return;\n    this.startQuerySubscription();\n  }\n\n  componentWillUnmount() {\n    this.removeQuerySubscription();\n    this.hasMounted = false;\n  }\n\n  componentDidUpdate(prevProps: QueryProps<TData, TVariables>) {\n    const isDiffRequest =\n      !isEqual(prevProps.query, this.props.query) ||\n      !isEqual(prevProps.variables, this.props.variables);\n    if (isDiffRequest) {\n      // If specified, `onError` / `onCompleted` callbacks are called here\n      // after local cache results are loaded.\n      this.handleErrorOrCompleted();\n    }\n  }\n\n  render(): React.ReactNode {\n    const { context } = this;\n    const finish = () => this.props.children(this.getQueryResult());\n    if (context && context.renderPromises) {\n      return context.renderPromises.addQueryPromise(this, finish);\n    }\n    return finish();\n  }\n\n  private extractOptsFromProps(props: QueryProps<TData, TVariables>) {\n    this.operation = parser(props.query);\n\n    invariant(\n      this.operation.type === DocumentType.Query,\n      `The <Query /> component requires a graphql query, but got a ${\n        this.operation.type === DocumentType.Mutation ? 'mutation' : 'subscription'\n      }.`,\n    );\n\n    const displayName = props.displayName || 'Query';\n\n    return {\n      ...props,\n      displayName,\n      context: props.context || {},\n      metadata: { reactComponent: { displayName }},\n    };\n  }\n\n  private initializeQueryObservable(props: QueryProps<TData, TVariables>) {\n    const opts = this.extractOptsFromProps(props);\n    // save for backwards compat of refetcherQueries without a recycler\n    this.setOperations(opts);\n\n    // See if there is an existing observable that was used to fetch the same data and\n    // if so, use it instead since it will contain the proper queryId to fetch\n    // the result set. This is used during SSR.\n    if (this.context && this.context.renderPromises) {\n      this.queryObservable = this.context.renderPromises.getSSRObservable(this);\n    }\n    if (!this.queryObservable) {\n      this.queryObservable = this.client.watchQuery(opts);\n    }\n  }\n\n  private setOperations(props: QueryProps<TData, TVariables>) {\n    if (this.context!.operations) {\n      this.context!.operations!.set(this.operation!.name, {\n        query: props.query,\n        variables: props.variables,\n      });\n    }\n  }\n\n  private updateQuery(props: QueryProps<TData, TVariables>) {\n    // if we skipped initially, we may not have yet created the observable\n    if (!this.queryObservable) {\n      this.initializeQueryObservable(props);\n    } else {\n      this.setOperations(props);\n    }\n\n    this.queryObservable!.setOptions(this.extractOptsFromProps(props))\n      // The error will be passed to the child container, so we don't\n      // need to log it here. We could conceivably log something if\n      // an option was set. OTOH we don't log errors w/ the original\n      // query. See https://github.com/apollostack/react-apollo/issues/404\n      .catch(() => null);\n  }\n\n  private startQuerySubscription = () => {\n    // When the `Query` component receives new props, or when we explicitly\n    // re-subscribe to a query using `resubscribeToQuery`, we start a new\n    // subscription in this method. To avoid un-necessary re-renders when\n    // receiving new props or re-subscribing, we track the full last\n    // observable result so it can be compared against incoming new data.\n    // We only trigger a re-render if the incoming result is different than\n    // the stored `lastRenderedResult`.\n\n    if (this.querySubscription) return;\n\n    this.querySubscription = this.queryObservable!.subscribe({\n      next: (result) => {\n        if (\n          this.lastRenderedResult &&\n          this.lastRenderedResult.loading === result.loading &&\n          this.lastRenderedResult.networkStatus === result.networkStatus &&\n          shallowEqual(this.lastRenderedResult.data, result.data)\n        ) {\n          return;\n        }\n\n        this.updateCurrentData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        this.updateCurrentData();\n      },\n    });\n  };\n\n  private removeQuerySubscription = () => {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      delete this.lastRenderedResult;\n      delete this.querySubscription;\n    }\n  };\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `queryObservable` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `queryObservable` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.queryObservable!.getLastError();\n    const lastResult = this.queryObservable!.getLastResult();\n    this.queryObservable!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.queryObservable!, { lastError, lastResult });\n  }\n\n  private updateCurrentData = () => {\n    // If specified, `onError` / `onCompleted` callbacks are called here\n    // after a network based Query result has been received.\n    this.handleErrorOrCompleted();\n\n    // Force a rerender that goes through shouldComponentUpdate.\n    if (this.hasMounted) this.forceUpdate();\n  };\n\n  private handleErrorOrCompleted = () => {\n    const result = this.queryObservable!.currentResult();\n    const { data, loading, error } = result;\n    const { onCompleted, onError } = this.props;\n    if (onCompleted && !loading && !error) {\n      onCompleted(data as TData);\n    } else if (onError && !loading && error) {\n      onError(error);\n    }\n  }\n\n  private getQueryResult = (): QueryResult<TData, TVariables> => {\n    let result = { data: Object.create(null) as TData } as any;\n    // Attach bound methods\n    Object.assign(result, observableQueryFields(this.queryObservable!));\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (this.props.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n      };\n    } else {\n      const currentResult = this.queryObservable!.currentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error props.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      const { fetchPolicy } = this.queryObservable!.options;\n      Object.assign(result, { loading, networkStatus, error });\n\n      const previousData =\n        this.lastRenderedResult ? this.lastRenderedResult.data : {};\n\n      if (loading) {\n        Object.assign(result.data, previousData, currentResult.data);\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.queryObservable!.getLastResult() || {}).data,\n        });\n      } else if (\n        fetchPolicy === 'no-cache' &&\n        Object.keys(currentResult.data).length === 0\n      ) {\n        // Make sure data pulled in by a `no-cache` query is preserved\n        // when the components parent tree is re-rendered.\n        result.data = previousData;\n      } else {\n        const { partialRefetch } = this.props;\n        if (\n          partialRefetch &&\n          currentResult.data !== null &&\n          typeof currentResult.data === 'object' &&\n          Object.keys(currentResult.data).length === 0 &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as an empty Object since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, { loading: true, networkStatus: NetworkStatus.loading });\n          result.refetch();\n          this.lastRenderedResult = result;\n          return result;\n        }\n\n        Object.assign(result.data, currentResult.data);\n      }\n    }\n\n    // Handle race condition where refetch is called on child mount or later\n    // Normal execution model:\n    // render(loading) -> mount -> start subscription -> get data -> render(with data)\n    //\n    // SSR with synchronous refetch:\n    // render(with data) -> refetch -> mount -> start subscription\n    //\n    // SSR with asynchronous refetch:\n    // render(with data) -> mount -> start subscription -> refetch\n    //\n    // If a subscription has not started, then the synchronous call to refetch\n    // must be made at a time when an active network request is being made, so\n    // we ensure that the network requests are deduped, to avoid an\n    // inconsistent UI state that displays different data for the current query\n    // alongside a refetched query.\n    //\n    // Once the Query component is mounted and the subscription is made, we\n    // always hit the network with refetch, since the components data will be\n    // updated and a network request is not currently active.\n    if (!this.querySubscription) {\n      const oldRefetch = (result as QueryControls<TData, TVariables>).refetch;\n\n      (result as QueryControls<TData, TVariables>).refetch = args => {\n        if (this.querySubscription) {\n          return oldRefetch(args);\n        } else {\n          return new Promise((r, f) => {\n            this.refetcherQueue = { resolve: r, reject: f, args };\n          });\n        }\n      };\n    }\n\n    // When the component is done rendering stored query errors, we'll\n    // remove those errors from the `ObservableQuery` query store, so they\n    // aren't re-displayed on subsequent (potentially error free)\n    // requests/responses.\n    //\n    // NOTE: Resetting query store errors is handled in 2 different ways here,\n    // since the `resetQueryStoreErrors` wasn't available until\n    // `apollo-client` 2.6.3. If a previous version of `apollo-client` is\n    // being used, errors are reset by reaching into `ObservableQuery`'s\n    // internals. This hack is temporary, as React Apollo 3 will be\n    // released shortly, and will enforce `apollo-client` 2.6.3 as the\n    // minimum.\n    setTimeout(() => {\n      if ((this.queryObservable! as any).resetQueryStoreErrors) {\n        // Apollo Client >= 2.6.3\n        (this.queryObservable! as any).resetQueryStoreErrors();\n      } else {\n        // Apollo Client < 2.6.3\n        const { queryManager, queryId } = (this.queryObservable! as any);\n        const queryStore = queryManager.queryStore.get(queryId);\n        if (queryStore) {\n          queryStore.networkError = null;\n          queryStore.graphQLErrors = [];\n        }\n      }\n    });\n\n    result.client = this.client;\n    this.lastRenderedResult = result;\n    return result;\n  };\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport ApolloClient, { PureQueryOptions, ApolloError, FetchPolicy } from 'apollo-client';\nimport { DataProxy } from 'apollo-cache';\nimport { invariant } from 'ts-invariant';\nimport { DocumentNode, GraphQLError } from 'graphql';\nimport shallowEqual from './utils/shallowEqual';\n\nimport { OperationVariables, RefetchQueriesProviderFn } from './types';\nimport { parser, DocumentType } from './parser';\nimport { getClient } from './component-utils';\n\nexport interface MutationResult<TData = Record<string, any>> {\n  data?: TData;\n  error?: ApolloError;\n  loading: boolean;\n  called: boolean;\n  client: ApolloClient<Object>;\n}\nexport interface MutationContext {\n  client?: ApolloClient<Object>;\n  operations: Map<string, { query: DocumentNode; variables: any }>;\n}\n\nexport interface ExecutionResult<T = Record<string, any>> {\n  data?: T;\n  extensions?: Record<string, any>;\n  errors?: GraphQLError[];\n}\n\n// Improved MutationUpdaterFn type, need to port them back to Apollo Client\nexport declare type MutationUpdaterFn<\n  T = {\n    [key: string]: any;\n  }\n> = (proxy: DataProxy, mutationResult: FetchResult<T>) => void;\n\nexport declare type FetchResult<\n  TData = Record<string, any>,\n  C = Record<string, any>,\n  E = Record<string, any>\n> = ExecutionResult<TData> & {\n  extensions?: E;\n  context?: C;\n};\n\nexport declare type MutationOptions<\n  TData = Record<string, any>,\n  TVariables = OperationVariables\n> = {\n  variables?: TVariables;\n  optimisticResponse?: TData;\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesProviderFn;\n  awaitRefetchQueries?: boolean;\n  update?: MutationUpdaterFn<TData>;\n  context?: Record<string, any>;\n  fetchPolicy?: FetchPolicy;\n};\n\nexport declare type MutationFn<TData = any, TVariables = OperationVariables> = (\n  options?: MutationOptions<TData, TVariables>,\n) => Promise<void | FetchResult<TData>>;\n\nexport interface MutationProps<TData = any, TVariables = OperationVariables> {\n  client?: ApolloClient<Object>;\n  mutation: DocumentNode;\n  ignoreResults?: boolean;\n  optimisticResponse?: TData;\n  variables?: TVariables;\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesProviderFn;\n  awaitRefetchQueries?: boolean;\n  update?: MutationUpdaterFn<TData>;\n  children: (\n    mutateFn: MutationFn<TData, TVariables>,\n    result: MutationResult<TData>,\n  ) => React.ReactNode;\n  onCompleted?: (data: TData) => void;\n  onError?: (error: ApolloError) => void;\n  context?: Record<string, any>;\n  fetchPolicy?: FetchPolicy;\n}\n\nexport interface MutationState<TData = any> {\n  called: boolean;\n  error?: ApolloError;\n  data?: TData;\n  loading: boolean;\n}\n\nconst initialState = {\n  loading: false,\n  called: false,\n  error: undefined,\n  data: undefined,\n};\n\nclass Mutation<TData = any, TVariables = OperationVariables> extends React.Component<\n  MutationProps<TData, TVariables>,\n  MutationState<TData>\n> {\n  static contextTypes = {\n    client: PropTypes.object,\n    operations: PropTypes.object,\n  };\n\n  static propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.object,\n    refetchQueries: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),\n      PropTypes.func,\n    ]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string,\n  };\n\n  private client: ApolloClient<any>;\n  private mostRecentMutationId: number;\n\n  private hasMounted: boolean = false;\n\n  constructor(props: MutationProps<TData, TVariables>, context: any) {\n    super(props, context);\n    this.client = getClient(props, context);\n    this.verifyDocumentIsMutation(props.mutation);\n    this.mostRecentMutationId = 0;\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    this.hasMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.hasMounted = false;\n  }\n\n  componentWillReceiveProps(\n    nextProps: MutationProps<TData, TVariables>,\n    nextContext: MutationContext,\n  ) {\n    const nextClient = getClient(nextProps, nextContext);\n    if (shallowEqual(this.props, nextProps) && this.client === nextClient) {\n      return;\n    }\n\n    if (this.props.mutation !== nextProps.mutation) {\n      this.verifyDocumentIsMutation(nextProps.mutation);\n    }\n\n    if (this.client !== nextClient) {\n      this.client = nextClient;\n      this.setState(initialState);\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n    const { loading, data, error, called } = this.state;\n\n    const result = {\n      called,\n      loading,\n      data,\n      error,\n      client: this.client,\n    };\n\n    return children(this.runMutation, result);\n  }\n\n  private runMutation = (options: MutationOptions<TData, TVariables> = {}) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(options)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((e: ApolloError) => {\n        this.onMutationError(e, mutationId);\n        if (!this.props.onError) throw e;\n      });\n  };\n\n  private mutate = (options: MutationOptions<TData, TVariables>) => {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context = {},\n      awaitRefetchQueries = false,\n      fetchPolicy,\n    } = this.props;\n    const mutateOptions = { ...options };\n\n    let refetchQueries = mutateOptions.refetchQueries || this.props.refetchQueries;\n    // XXX this will be removed in the 3.0 of Apollo Client. Currently, we\n    // support refectching of named queries which just pulls the latest\n    // variables to match. This forces us to either a) keep all queries around\n    // to be able to iterate over and refetch, or b) [new in 2.1] keep a map of\n    // operations on the client where operation name => { query, variables }\n    //\n    // Going forward, we should only allow using the full operation + variables to\n    // refetch.\n    if (refetchQueries && refetchQueries.length && Array.isArray(refetchQueries)) {\n      refetchQueries = (refetchQueries as any).map((x: string | PureQueryOptions) => {\n        if (typeof x === 'string' && this.context.operations)\n          return this.context.operations.get(x) || x;\n        return x;\n      });\n      delete mutateOptions.refetchQueries;\n    }\n\n    const mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n\n    return this.client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions,\n    });\n  };\n\n  private onMutationStart = () => {\n    if (!this.state.loading && !this.props.ignoreResults) {\n      this.setState({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true,\n      });\n    }\n  };\n\n  private onMutationCompleted = (response: ExecutionResult<TData>, mutationId: number) => {\n    const { onCompleted, ignoreResults } = this.props;\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0 ? new ApolloError({ graphQLErrors: errors }) : undefined;\n\n    const callOncomplete = () => (onCompleted ? onCompleted(data as TData) : null);\n\n    if (this.hasMounted && this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.setState({ loading: false, data, error }, callOncomplete);\n    } else {\n      callOncomplete();\n    }\n  };\n\n  private onMutationError = (error: ApolloError, mutationId: number) => {\n    const { onError } = this.props;\n    const callOnError = () => (onError ? onError(error) : null);\n\n    if (this.hasMounted && this.isMostRecentMutation(mutationId)) {\n      this.setState({ loading: false, error }, callOnError);\n    } else {\n      callOnError();\n    }\n  };\n\n  private generateNewMutationId = (): number => {\n    this.mostRecentMutationId = this.mostRecentMutationId + 1;\n    return this.mostRecentMutationId;\n  };\n\n  private isMostRecentMutation = (mutationId: number) => {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  private verifyDocumentIsMutation = (mutation: DocumentNode) => {\n    const operation = parser(mutation);\n    invariant(\n      operation.type === DocumentType.Mutation,\n      `The <Mutation /> component requires a graphql mutation, but got a ${\n        operation.type === DocumentType.Query ? 'query' : 'subscription'\n      }.`,\n    );\n  };\n}\n\nexport default Mutation;\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport ApolloClient, { ApolloError, FetchPolicy } from 'apollo-client';\nimport { Observable } from 'apollo-link';\nimport { DocumentNode } from 'graphql';\nimport { ZenObservable } from 'zen-observable-ts';\n\nimport { OperationVariables } from './types';\nimport { getClient } from './component-utils';\n\nimport shallowEqual from './utils/shallowEqual';\nimport { invariant } from 'ts-invariant';\n\nexport interface SubscriptionResult<TData = any> {\n  loading: boolean;\n  data?: TData;\n  error?: ApolloError;\n}\n\nexport interface OnSubscriptionDataOptions<TData = any> {\n  client: ApolloClient<Object>;\n  subscriptionData: SubscriptionResult<TData>;\n}\n\nexport interface SubscriptionProps<TData = any, TVariables = OperationVariables> {\n  subscription: DocumentNode;\n  variables?: TVariables;\n  fetchPolicy?: FetchPolicy;\n  shouldResubscribe?: any;\n  client?: ApolloClient<Object>;\n  onSubscriptionData?: (options: OnSubscriptionDataOptions<TData>) => any;\n  onSubscriptionComplete?: () => void;\n  children?: (result: SubscriptionResult<TData>) => React.ReactNode;\n}\n\nexport interface SubscriptionState<TData = any> {\n  loading: boolean;\n  data?: TData;\n  error?: ApolloError;\n}\n\nexport interface SubscriptionContext {\n  client?: ApolloClient<Object>;\n}\n\nclass Subscription<TData = any, TVariables = any> extends React.Component<\n  SubscriptionProps<TData, TVariables>,\n  SubscriptionState<TData>\n> {\n  static contextTypes = {\n    client: PropTypes.object,\n  };\n\n  static propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  };\n\n  private client: ApolloClient<any>;\n  private queryObservable?: Observable<any>;\n  private querySubscription?: ZenObservable.Subscription;\n\n  constructor(props: SubscriptionProps<TData, TVariables>, context: SubscriptionContext) {\n    super(props, context);\n\n    this.client = getClient(props, context);\n    this.initialize(props);\n    this.state = this.getInitialState();\n  }\n\n  componentDidMount() {\n    this.startSubscription();\n  }\n\n  componentWillReceiveProps(\n    nextProps: SubscriptionProps<TData, TVariables>,\n    nextContext: SubscriptionContext,\n  ) {\n    const nextClient = getClient(nextProps, nextContext);\n\n    if (\n      shallowEqual(this.props.variables, nextProps.variables) &&\n      this.client === nextClient &&\n      this.props.subscription === nextProps.subscription\n    ) {\n      return;\n    }\n\n    let shouldResubscribe = nextProps.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.props, nextProps);\n    }\n    const shouldNotResubscribe = shouldResubscribe === false;\n    if (this.client !== nextClient) {\n      this.client = nextClient;\n    }\n\n    if (!shouldNotResubscribe) {\n      this.endSubscription();\n      delete this.queryObservable;\n      this.initialize(nextProps);\n      this.startSubscription();\n      this.setState(this.getInitialState());\n      return;\n    }\n    this.initialize(nextProps);\n    this.startSubscription();\n  }\n\n  componentWillUnmount() {\n    this.endSubscription();\n  }\n\n  render() {\n    const renderFn: any = this.props.children;\n    if (!renderFn) return null;\n    const result = Object.assign({}, this.state, {\n      variables: this.props.variables,\n    });\n    return renderFn(result);\n  }\n\n  private initialize = (props: SubscriptionProps<TData, TVariables>) => {\n    if (this.queryObservable) return;\n    this.queryObservable = this.client.subscribe({\n      query: props.subscription,\n      variables: props.variables,\n      fetchPolicy: props.fetchPolicy,\n    });\n  };\n\n  private startSubscription = () => {\n    if (this.querySubscription) return;\n    this.querySubscription = this.queryObservable!.subscribe({\n      next: this.updateCurrentData,\n      error: this.updateError,\n      complete: this.completeSubscription\n    });\n  };\n\n  private getInitialState = () => ({\n    loading: true,\n    error: undefined,\n    data: undefined,\n  });\n\n  private updateCurrentData = (result: SubscriptionResult<TData>) => {\n    const {\n      client,\n      props: { onSubscriptionData },\n    } = this;\n    this.setState({\n      data: result.data,\n      loading: false,\n      error: undefined,\n    });\n    if (onSubscriptionData) onSubscriptionData({ client, subscriptionData: result });\n  };\n\n  private updateError = (error: any) => {\n    this.setState({\n      error,\n      loading: false,\n    });\n  };\n\n  private completeSubscription = () => {\n    const { onSubscriptionComplete } = this.props;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  private endSubscription = () => {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      delete this.querySubscription;\n    }\n  };\n}\n\nexport default Subscription;\n","import * as React from 'react';\nimport { invariant } from 'ts-invariant';\n\nimport { OperationVariables } from './types';\nimport { DocumentType, IDocumentDefinition } from './parser';\n\nexport const defaultMapPropsToOptions = () => ({});\nexport const defaultMapResultToProps: <P>(props: P) => P = props => props;\nexport const defaultMapPropsToSkip = () => false;\n\nexport function getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function calculateVariablesFromProps<TProps>(operation: IDocumentDefinition, props: TProps) {\n  let variables: OperationVariables = {};\n  for (let { variable, type } of operation.variables) {\n    if (!variable.name || !variable.name.value) continue;\n\n    const variableName = variable.name.value;\n    const variableProp = (props as any)[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    // Allow optional props\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\n\nexport type RefSetter<TChildProps> = (ref: React.ComponentClass<TChildProps>) => void | void;\n\n// base class for hocs to easily manage refs\nexport class GraphQLBase<TProps, TChildProps, TState = any> extends React.Component<\n  TProps,\n  TState\n> {\n  public withRef: boolean = false;\n  // wrapped instance\n  private wrappedInstance?: React.ComponentClass<TChildProps>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.setWrappedInstance = this.setWrappedInstance.bind(this);\n  }\n\n  getWrappedInstance() {\n    invariant(\n      this.withRef,\n      `To access the wrapped instance, you need to specify ` + `{ withRef: true } in the options`,\n    );\n\n    return this.wrappedInstance;\n  }\n\n  setWrappedInstance(ref: React.ComponentClass<TChildProps>) {\n    this.wrappedInstance = ref;\n  }\n}\n","import * as React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { parser } from './parser';\nimport { OperationOption, QueryOpts, OptionProps, DataProps } from './types';\nimport { default as Query } from './Query';\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip,\n} from './hoc-utils';\n\nexport function withQuery<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<TProps, TData, TGraphQLVariables, TChildProps> = {},\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo',\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => QueryOpts;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = () => options as QueryOpts;\n  }\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = () => skip as any;\n  }\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>,\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip ? Object.create(null) : { ...mapPropsToOptions(props) };\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(\n            operation,\n            props,\n          );\n        }\n        return (\n          <Query\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            query={document}\n            warnUnhandledError\n          >\n            {({ client: _, data, ...r }) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance,\n                });\n              }\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<TProps, TData, TGraphQLVariables> = {\n                  [name]: result,\n                  ownProps: props as TProps,\n                };\n                lastResultProps = operationOptions.props(newResult, lastResultProps);\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Query>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import * as React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { parser } from './parser';\nimport { MutationOpts, OperationOption, OptionProps, MutateProps } from './types';\nimport { default as Mutation } from './Mutation';\nimport {\n  defaultMapPropsToOptions,\n  getDisplayName,\n  calculateVariablesFromProps,\n  GraphQLBase,\n} from './hoc-utils';\n\nexport function withMutation<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = MutateProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<TProps, TData, TGraphQLVariables, TChildProps> = {},\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n\n  const { options = defaultMapPropsToOptions, alias = 'Apollo' } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => MutationOpts;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = () => options as MutationOpts;\n\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>,\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      render() {\n        let props = this.props;\n        const opts = mapPropsToOptions(props);\n\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance,\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(\n            operation,\n            props,\n          );\n        }\n\n        return (\n          <Mutation {...opts} mutation={document} ignoreResults>\n            {(mutate, { data, ...r }) => {\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Mutation component's shape here to replicate that\n              // this matches the query HoC\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'mutate';\n              const resultName = operationOptions.name ? `${name}Result` : 'result';\n              let childProps = { [name]: mutate, [resultName]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<TProps, TData, TGraphQLVariables> = {\n                  [name]: mutate,\n                  [resultName]: result,\n                  ownProps: props,\n                };\n                childProps = operationOptions.props(newResult) as any;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Mutation>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import * as React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { parser } from './parser';\nimport { OperationOption, QueryOpts, OptionProps, DataProps } from './types';\nimport { default as Subscription } from './Subscriptions';\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip,\n} from './hoc-utils';\n\nexport function withSubscription<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<TProps, TData, TGraphQLVariables, TChildProps> = {},\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo',\n    shouldResubscribe,\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => QueryOpts;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = () => options as QueryOpts;\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = () => skip as any;\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>,\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps, { resubscribe: boolean }> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      constructor(props: TProps) {\n        super(props);\n        this.state = { resubscribe: false };\n      }\n      componentWillReceiveProps(nextProps: TProps) {\n        if (!shouldResubscribe) return;\n        this.setState({\n          resubscribe: shouldResubscribe(this.props, nextProps),\n        });\n      }\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip ? Object.create(null) : mapPropsToOptions(props);\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(\n            operation,\n            props,\n          );\n        }\n        return (\n          <Subscription\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            subscription={document}\n            shouldResubscribe={this.state.resubscribe}\n          >\n            {({ data, ...r }) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance,\n                });\n              }\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<TProps, TData, TGraphQLVariables> = {\n                  [name]: result,\n                  ownProps: props as TProps,\n                };\n                lastResultProps = operationOptions.props(newResult, lastResultProps);\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Subscription>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import * as React from 'react';\nimport { DocumentNode } from 'graphql';\nimport { parser, DocumentType } from './parser';\nimport { OperationOption, DataProps, MutateProps } from './types';\n\nimport { withQuery } from './query-hoc';\nimport { withMutation } from './mutation-hoc';\nimport { withSubscription } from './subscription-hoc';\n\nexport function graphql<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = Partial<DataProps<TData, TGraphQLVariables>> &\n    Partial<MutateProps<TData, TGraphQLVariables>>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<TProps, TData, TGraphQLVariables, TChildProps> = {},\n) {\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n    // case DocumentType.Fragment:\n    //   throw new Error('fragments cannont currently be used on their own');\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\n","import * as React from 'react';\nimport { OperationOption } from './types';\nimport ApolloConsumer from './ApolloConsumer';\nimport { ApolloClient } from 'apollo-client';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { invariant } from 'ts-invariant';\n\nfunction getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport type WithApolloClient<P> = P & { client: ApolloClient<any> };\n\nexport default function withApollo<TProps, TResult = any>(\n  WrappedComponent: React.ComponentType<WithApolloClient<TProps>>,\n  operationOptions: OperationOption<TProps, TResult> = {},\n): React.ComponentClass<TProps> {\n  const withDisplayName = `withApollo(${getDisplayName(WrappedComponent)})`;\n\n  class WithApollo extends React.Component<TProps> {\n    static displayName = withDisplayName;\n    static WrappedComponent = WrappedComponent;\n\n    // wrapped instance\n    private wrappedInstance: any;\n\n    constructor(props: TProps) {\n      super(props);\n      this.setWrappedInstance = this.setWrappedInstance.bind(this);\n    }\n\n    getWrappedInstance() {\n      invariant(\n        operationOptions.withRef,\n        `To access the wrapped instance, you need to specify ` + `{ withRef: true } in the options`,\n      );\n\n      return this.wrappedInstance;\n    }\n\n    setWrappedInstance(ref: React.ComponentType<WithApolloClient<TProps>>) {\n      this.wrappedInstance = ref;\n    }\n\n    render() {\n      return (\n        <ApolloConsumer>\n          {client => {\n            const props = Object.assign({}, this.props, {\n              client,\n              ref: operationOptions.withRef ? this.setWrappedInstance : undefined,\n            });\n            return <WrappedComponent {...props} />;\n          }}\n        </ApolloConsumer>\n      );\n    }\n  }\n\n  // Make sure we preserve any custom statics on the original component.\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport Query from './Query';\nimport { ObservableQuery } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n}\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null,\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<Query<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    queryInstance: Query<TData, TVariables>,\n    observable: ObservableQuery<any, TVariables>,\n  ) {\n    this.lookupQueryInfo(queryInstance).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(queryInstance: Query<TData, TVariables>) {\n    return this.lookupQueryInfo(queryInstance).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: Query<TData, TVariables>,\n    finish: () => React.ReactNode,\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance);\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance,\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        }),\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    queryInstance: Query<TData, TVariables>,\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = queryInstance.props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n\nexport default function getDataFromTree(\n  tree: React.ReactNode,\n  context: { [key: string]: any } = {},\n) {\n  return getMarkupFromTree({\n    tree,\n    context,\n    // If you need to configure this renderFunction, call getMarkupFromTree\n    // directly instead of getDataFromTree.\n    renderFunction: require(\"react-dom/server\").renderToStaticMarkup,\n  });\n}\n\nexport type GetMarkupFromTreeOptions = {\n  tree: React.ReactNode;\n  context?: { [key: string]: any };\n  renderFunction?: (tree: React.ReactElement<any>) => string;\n};\n\nexport function getMarkupFromTree({\n  tree,\n  context = {},\n  // The rendering function is configurable! We use renderToStaticMarkup as\n  // the default, because it's a little less expensive than renderToString,\n  // and legacy usage of getDataFromTree ignores the return value anyway.\n  renderFunction = require(\"react-dom/server\").renderToStaticMarkup,\n}: GetMarkupFromTreeOptions): Promise<string> {\n  const renderPromises = new RenderPromises();\n\n  class RenderPromisesProvider extends React.Component {\n    static childContextTypes: { [key: string]: any } = {\n      renderPromises: PropTypes.object,\n    };\n\n    getChildContext() {\n      return { ...context, renderPromises };\n    }\n\n    render() {\n      // Always re-render from the rootElement, even though it might seem\n      // better to render the children of the component responsible for the\n      // promise, because it is not possible to reconstruct the full context\n      // of the original rendering (including all unknown context provider\n      // elements) for a subtree of the orginal component tree.\n      return tree;\n    }\n  }\n\n  Object.keys(context).forEach(key => {\n    RenderPromisesProvider.childContextTypes[key] = PropTypes.any;\n  });\n\n  function process(): Promise<string> | string {\n    const html = renderFunction(React.createElement(RenderPromisesProvider));\n    return renderPromises.hasPromises()\n      ? renderPromises.consumeAndAwaitPromises().then(process)\n      : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n","import { ReactElement } from 'react';\nimport { getMarkupFromTree } from './getDataFromTree';\n\nexport function renderToStringWithData(component: ReactElement<any>): Promise<string> {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require(\"react-dom/server\").renderToString,\n  });\n}\n","export function compose(...funcs: Function[]) {\n  const functions = funcs.reverse();\n  return function (...args: any[]) {\n    const [firstFunction, ...restFunctions] = functions\n    let result = firstFunction.apply(null, args);\n    restFunctions.forEach((fnc) => {\n      result = fnc.call(null, result)\n    });\n    return result;\n  }\n}\n"],"names":["React.createContext","React.createElement","PropTypes.object","PropTypes.func","tslib_1.__extends","PropTypes.node","PropTypes.string","PropTypes.bool","PropTypes.number","React.Component","PropTypes.oneOfType","PropTypes.arrayOf","getDisplayName","PropTypes.any"],"mappings":";;;;;;;;IASa,aAAa,GAAGA,aAAmB;IAC9CA,aAAmB,CAAiC,SAAS,CAAC;;ACAhE,IAAM,cAAc,GAClB,UAAC,KAAK,EAAE,aAAa;IACnB,SAAS,MAAM,CAAC,OAAY;QAC1B,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YAC/B,MAAM;gBAEJ,iDAAiD,CAClD,CAAC;SACH;QACD,OAAO,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KACvC;IAED,OAAO,aAAa,IAClBC,cAAC,aAAa,CAAC,QAAQ,QACpB,MAAM,CACgB,KAGzB,MAAM,CAAC,aAAa,CAAC,CACtB,CAAC;CACH,CAAC;AAEJ,cAAc,CAAC,YAAY,GAAG;IAC5B,MAAM,EAAEC,MAAgB,CAAC,UAAU;CACpC,CAAC;AAEF,cAAc,CAAC,SAAS,GAAG;IACzB,QAAQ,EAAEC,IAAc,CAAC,UAAU;CACpC,CAAC;;ACxBF;IAAoDC,kCAAsC;IAaxF,wBAAY,KAAkC,EAAE,OAAY;QAA5D,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SActB;QAjBO,gBAAU,GAAyD,IAAI,GAAG,EAAE,CAAC;QAKnF;YAGI,qDAAqD,CACxD,CAAC;QAKF,IAAI,CAAE,KAAK,CAAC,MAAc,CAAC,oBAAoB,EAAE;YAC9C,KAAK,CAAC,MAAc,CAAC,oBAAoB,GAAG,KAAI,CAAC,UAAU,CAAC;SAC9D;;KACF;IAED,wCAAe,GAAf;QACE,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;YACzB,UAAU,EAAG,IAAI,CAAC,KAAK,CAAC,MAAc,CAAC,oBAAoB;SAC5D,CAAC;KACH;IAED,+BAAM,GAAN;QACE,OAAO,aAAa,IAClBH,cAAC,aAAa,CAAC,QAAQ,IAAC,KAAK,EAAE,IAAI,CAAC,eAAe,EAAE,IAClD,IAAI,CAAC,KAAK,CAAC,QAAQ,CACG,KAEzB,IAAI,CAAC,KAAK,CAAC,QAAQ,CACpB,CAAC;KACH;IA5CM,wBAAS,GAAG;QACjB,MAAM,EAAEC,MAAgB,CAAC,UAAU;QACnC,QAAQ,EAAEG,IAAc,CAAC,UAAU;KACpC,CAAC;IAEK,gCAAiB,GAAG;QACzB,MAAM,EAAEH,MAAgB,CAAC,UAAU;QACnC,UAAU,EAAEA,MAAgB;KAC7B,CAAC;IAqCJ,qBAAC;CAAA,CA9CmD,SAAS,GA8C5D;;ACnDD,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,iDAAK,CAAA;IACL,uDAAQ,CAAA;IACR,+DAAY,CAAA;CACb,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAQD,IAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;AAGxB,SAAgB,MAAM,CAAC,QAAsB;IAC3C,IAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnC,IAAI,MAAM;QAAE,OAAO,MAAM,CAAC;IAE1B,IAAI,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;IAO1B,WACG,CAAC,QAAQ,KAAK,yCAEQ;QACrB,oEAAoE;QACpE,2CAA2C,CAC9C,CAAC;IAEF,IAAM,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC3C,UAAC,CAAiB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,oBAAoB,GAAA,CACvD,CAAC;IAEF,IAAM,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CACzC,UAAC,CAAiB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,OAAO,GAAA,CACnF,CAAC;IAEF,IAAM,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC3C,UAAC,CAAiB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,UAAU,GAAA,CACtF,CAAC;IAEF,IAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC/C,UAAC,CAAiB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,cAAc,GAAA,CAC1F,CAAC;IAEF,WACG,SAAS,oBAAoB;QAE5B,4DAA4D;4BAIhD,YAAY,OAAO,2BAA2B;;yCAI5B;;yCAIG,OAAO;QACxC;QAAsC,oBAAoB,YAAY,CAAC;IAE3E,IAAM,6BAA6B,CAAC;wCAKlC;8CACuC;+EACkC;qBAGxD;;IAGnB,IAAI,UAAU;0BACM;;;;;QAKd,OAAO;;IAEb,cAAc;;;;;SCvFA,SAAS,CACvB,KAA2B,EAC3B,OAA+B;IAE/B,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC;IAE9C,WACG,CAAC,QACF;QACE,6DAA6D;QAC7D,qCAAqC,CACxC,CAAC;IAEF,OAAO,MAA8B,CAAC;CACvC;;ACzBO,IAAA,gDAAc,CAAsB;AAE5C,SAAS,EAAE,CAAC,CAAM,EAAE,CAAM;IACxB,IAAI,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC9C;IACD,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CAC3B;AAED,SAAS,QAAQ,CAAC,GAAQ;IACxB,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC;CAChD;AAED,SAAwB,YAAY,CAAC,IAAS,EAAE,IAAS;IACvD,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACtC,OAAO,KAAK,CAAC;KACd;IAED,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE/B,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;QAC5C,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC,KAAK,CACf,UAAA,GAAG,IAAI,OAAA,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAA,CAClE,CAAC;CACH;;ACID,SAAS,qBAAqB,CAC5B,UAA8C;IAE9C,IAAM,MAAM,GAAG;QACb,SAAS,EAAE,UAAU,CAAC,SAAS;QAC/B,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC;QAC5C,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC;QAChD,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;QACpD,YAAY,EAAE,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC;QACtD,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC;QACpD,eAAe,EAAE,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC;KAC7D,CAAC;IAIF,OAAO,MAAkD,CAAC;CAC3D;AAkCD;IAAiFE,yBAEhF;IAyCC,eAAY,KAAoC,EAAE,OAAqB;QAAvE,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAItB;QATO,gBAAU,GAAY,KAAK,CAAC;QAE5B,wBAAkB,GAAoC,IAAI,CAAC;QAgL3D,4BAAsB,GAAG;YAS/B,IAAI,KAAI,CAAC,iBAAiB;gBAAE,OAAO;YAEnC,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,eAAgB,CAAC,SAAS,CAAC;gBACvD,IAAI,EAAE,UAAC,MAAM;oBACX,IACE,KAAI,CAAC,kBAAkB;wBACvB,KAAI,CAAC,kBAAkB,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO;wBAClD,KAAI,CAAC,kBAAkB,CAAC,aAAa,KAAK,MAAM,CAAC,aAAa;wBAC9D,YAAY,CAAC,KAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,EACvD;wBACA,OAAO;qBACR;oBAED,KAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC1B;gBACD,KAAK,EAAE,UAAA,KAAK;oBACV,KAAI,CAAC,kBAAkB,EAAE,CAAC;oBAE1B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,eAAe,CAAC;wBAAE,MAAM,KAAK,CAAC;oBACxD,KAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC1B;aACF,CAAC,CAAC;SACJ,CAAC;QAEM,6BAAuB,GAAG;YAChC,IAAI,KAAI,CAAC,iBAAiB,EAAE;gBAC1B,KAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;gBACrC,OAAO,KAAI,CAAC,kBAAkB,CAAC;gBAC/B,OAAO,KAAI,CAAC,iBAAiB,CAAC;aAC/B;SACF,CAAC;QAmBM,uBAAiB,GAAG;YAG1B,KAAI,CAAC,sBAAsB,EAAE,CAAC;YAG9B,IAAI,KAAI,CAAC,UAAU;gBAAE,KAAI,CAAC,WAAW,EAAE,CAAC;SACzC,CAAC;QAEM,4BAAsB,GAAG;YAC/B,IAAM,MAAM,GAAG,KAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;YAC7C,IAAA,kBAAI,EAAE,wBAAO,EAAE,oBAAK,CAAY;YAClC,IAAA,gBAAqC,EAAnC,4BAAW,EAAE,oBAAsB,CAAC;YAC5C,IAAI,WAAW,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,EAAE;gBACrC,WAAW,CAAC,IAAa,CAAC,CAAC;aAC5B;iBAAM,IAAI,OAAO,IAAI,CAAC,OAAO,IAAI,KAAK,EAAE;gBACvC,OAAO,CAAC,KAAK,CAAC,CAAC;aAChB;SACF,CAAA;QAEO,oBAAc,GAAG;YACvB,IAAI,MAAM,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAU,EAAS,CAAC;YAE3D,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,qBAAqB,CAAC,KAAI,CAAC,eAAgB,CAAC,CAAC,CAAC;YAKpE,IAAI,KAAI,CAAC,KAAK,CAAC,IAAI,EAAE;gBACnB,MAAM,gBACD,MAAM,IACT,IAAI,EAAE,SAAS,EACf,KAAK,EAAE,SAAS,EAChB,OAAO,EAAE,KAAK,GACf,CAAC;aACH;iBAAM;gBACL,IAAM,aAAa,GAAG,KAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;gBACpD,IAAA,+BAAO,EAAE,+BAAO,EAAE,2CAAa,EAAE,6BAAM,CAAmB;gBAC5D,IAAA,2BAAK,CAAmB;gBAI9B,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC/B,KAAK,GAAG,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,CAAC;iBACpD;gBAEO,IAAA,uDAAW,CAAmC;gBACtD,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,SAAA,EAAE,aAAa,eAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;gBAEzD,IAAM,YAAY,GAChB,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,GAAG,EAAE,CAAC;gBAE9D,IAAI,OAAO,EAAE;oBACX,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;iBAC9D;qBAAM,IAAI,KAAK,EAAE;oBAChB,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;wBACpB,IAAI,EAAE,CAAC,KAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,IAAI,EAAE,EAAE,IAAI;qBACzD,CAAC,CAAC;iBACJ;qBAAM,IACL,WAAW,KAAK,UAAU;oBAC1B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAC5C;oBAGA,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC;iBAC5B;qBAAM;oBACG,IAAA,2CAAc,CAAgB;oBACtC,IACE,cAAc;wBACd,aAAa,CAAC,IAAI,KAAK,IAAI;wBAC3B,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ;wBACtC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC;wBAC5C,OAAO;wBACP,WAAW,KAAK,YAAY,EAC5B;wBASA,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;wBAC/E,MAAM,CAAC,OAAO,EAAE,CAAC;wBACjB,KAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC;wBACjC,OAAO,MAAM,CAAC;qBACf;oBAED,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;iBAChD;aACF;YAqBD,IAAI,CAAC,KAAI,CAAC,iBAAiB,EAAE;gBAC3B,IAAM,YAAU,GAAI,MAA2C,CAAC,OAAO,CAAC;gBAEvE,MAA2C,CAAC,OAAO,GAAG,UAAA,IAAI;oBACzD,IAAI,KAAI,CAAC,iBAAiB,EAAE;wBAC1B,OAAO,YAAU,CAAC,IAAI,CAAC,CAAC;qBACzB;yBAAM;wBACL,OAAO,IAAI,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;4BACtB,KAAI,CAAC,cAAc,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC;yBACvD,CAAC,CAAC;qBACJ;iBACF,CAAC;aACH;YAcD,UAAU,CAAC;gBACT,IAAK,KAAI,CAAC,eAAwB,CAAC,qBAAqB,EAAE;oBAEvD,KAAI,CAAC,eAAwB,CAAC,qBAAqB,EAAE,CAAC;iBACxD;qBAAM;oBAEC,IAAA,0BAA0D,EAAxD,8BAAY,EAAE,oBAA0C,CAAC;oBACjE,IAAM,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACxD,IAAI,UAAU,EAAE;wBACd,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;wBAC/B,UAAU,CAAC,aAAa,GAAG,EAAE,CAAC;qBAC/B;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;YAC5B,KAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC;YACjC,OAAO,MAAM,CAAC;SACf,CAAC;QAjYA,KAAI,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,KAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;;KACvC;IAGD,yBAAS,GAAT;QACE,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QAGlC,IAAM,eAUQ,EATZ,sBAAQ,EACR,YAAG,EACH,4BAAW,EACX,cAAI,EACJ,kBAAM,EACN,4BAAW,EACX,oBAAO,EACP,kCAAc,EACd,mHACY,CAAC;QAET,IAAA,8BAAW,CAAU;QAC3B,IAAI,GAAG,KAAK,KAAK;YAAE,OAAO,KAAK,CAAC;QAChC,IAAI,WAAW,KAAK,cAAc,IAAI,WAAW,KAAK,mBAAmB,EAAE;YACzE,WAAW,GAAG,aAAa,CAAC;SAC7B;QAED,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,cACpC,IAAI,IACP,WAAW,aAAA,IACX,CAAC;QAGH,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YAC/C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;SACrE;QAED,IAAM,MAAM,GAAG,IAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;QAErD,OAAO,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC;KACrD;IAED,iCAAiB,GAAjB;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;YAAE,OAAO;QAE5B,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,cAAc,EAAE;YACjB,IAAA,wBAA+C,EAA7C,cAAI,EAAE,oBAAO,EAAE,kBAA8B,CAAC;YACtD,IAAI,CAAC,eAAgB,CAAC,OAAO,CAAC,IAAI,CAAC;iBAChC,IAAI,CAAC,OAAO,CAAC;iBACb,KAAK,CAAC,MAAM,CAAC,CAAC;SAClB;KACF;IAED,yCAAyB,GAAzB,UAA0B,SAAwC,EAAE,WAAyB;QAE3F,IAAI,SAAS,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACtC,IAAI,CAAC,eAAgB,CAAC,gBAAgB,EAAE,CAAC;YACzC,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC/B,OAAO;SACR;QAED,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAErD,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YACrE,OAAO;SACR;QAED,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;YACzB,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;SAC7B;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,EAAE;YACxC,IAAI,CAAC,eAAgB,CAAC,gBAAgB,EAAE,CAAC;YACzC,IAAI,CAAC,uBAAuB,EAAE,CAAC;SAChC;QAED,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC5B,IAAI,SAAS,CAAC,IAAI;YAAE,OAAO;QAC3B,IAAI,CAAC,sBAAsB,EAAE,CAAC;KAC/B;IAED,oCAAoB,GAApB;QACE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;IAED,kCAAkB,GAAlB,UAAmB,SAAwC;QACzD,IAAM,aAAa,GACjB,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YAC3C,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACtD,IAAI,aAAa,EAAE;YAGjB,IAAI,CAAC,sBAAsB,EAAE,CAAC;SAC/B;KACF;IAED,sBAAM,GAAN;QAAA,iBAOC;QANS,IAAA,sBAAO,CAAU;QACzB,IAAM,MAAM,GAAG,cAAM,OAAA,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAI,CAAC,cAAc,EAAE,CAAC,GAAA,CAAC;QAChE,IAAI,OAAO,IAAI,OAAO,CAAC,cAAc,EAAE;YACrC,OAAO,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SAC7D;QACD,OAAO,MAAM,EAAE,CAAC;KACjB;IAEO,oCAAoB,GAA5B,UAA6B,KAAoC;QAC/D,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAErC,yBACiB,6BACf,kEACE,KAAK;QAIT,IAAM,WAAW,GAAG,KAAK,CAAC,WAAW,IAAI,OAAO,CAAC;QAEjD,oBACK,KAAK,IACR,WAAW,aAAA,EACX,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,EAAE,EAC5B,QAAQ,EAAE,EAAE,cAAc,EAAE,EAAE,WAAW,aAAA,EAAE,EAAC,IAC5C;KACH;IAEO,yCAAyB,GAAjC,UAAkC,KAAoC;QACpE,IAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAE9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAKzB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;YAC/C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC3E;QACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SACrD;KACF;IAEO,6BAAa,GAArB,UAAsB,KAAoC;QACxD,IAAI,IAAI,CAAC,OAAQ,CAAC,UAAU,EAAE;YAC5B,IAAI,CAAC,OAAQ,CAAC,UAAW,CAAC,GAAG,CAAC,IAAI,CAAC,SAAU,CAAC,IAAI,EAAE;gBAClD,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,SAAS,EAAE,KAAK,CAAC,SAAS;aAC3B,CAAC,CAAC;SACJ;KACF;IAEO,2BAAW,GAAnB,UAAoB,KAAoC;QAEtD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;SACvC;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;QAED,IAAI,CAAC,eAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aAK/D,KAAK,CAAC,cAAM,OAAA,IAAI,GAAA,CAAC,CAAC;KACtB;IA2CO,kCAAkB,GAA1B;QACE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAS/B,IAAM,SAAS,GAAG,IAAI,CAAC,eAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAM,UAAU,GAAG,IAAI,CAAC,eAAgB,CAAC,aAAa,EAAE,CAAC;QACzD,IAAI,CAAC,eAAgB,CAAC,gBAAgB,EAAE,CAAC;QACzC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,eAAgB,EAAE,EAAE,SAAS,WAAA,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;KACjE;IA9QM,kBAAY,GAAG;QACpB,MAAM,EAAEF,MAAgB;QACxB,UAAU,EAAEA,MAAgB;QAC5B,cAAc,EAAEA,MAAgB;KACjC,CAAC;IAEK,eAAS,GAAG;QACjB,MAAM,EAAEA,MAAgB;QACxB,QAAQ,EAAEC,IAAc,CAAC,UAAU;QACnC,WAAW,EAAEG,MAAgB;QAC7B,2BAA2B,EAAEC,IAAc;QAC3C,WAAW,EAAEJ,IAAc;QAC3B,OAAO,EAAEA,IAAc;QACvB,YAAY,EAAEK,MAAgB;QAC9B,KAAK,EAAEN,MAAgB,CAAC,UAAU;QAClC,SAAS,EAAEA,MAAgB;QAC3B,GAAG,EAAEK,IAAc;QACnB,cAAc,EAAEA,IAAc;QAC9B,iBAAiB,EAAEA,IAAc;KAClC,CAAC;IA0ZJ,YAAC;CAhbD,CAAiFE,SAAe,GAgb/F;;AC5aD,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,SAAS;IAChB,IAAI,EAAE,SAAS;CAChB,CAAC;AAEF;IAAqEL,4BAGpE;IA2BC,kBAAY,KAAuC,EAAE,OAAY;QAAjE,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAKtB;QARO,gBAAU,GAAY,KAAK,CAAC;QAoD5B,iBAAW,GAAG,UAAC,OAAgD;YAAhD,wBAAA,EAAA,YAAgD;YACrE,KAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAM,UAAU,GAAG,KAAI,CAAC,qBAAqB,EAAE,CAAC;YAEhD,OAAO,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC;iBACxB,IAAI,CAAC,UAAC,QAAgC;gBACrC,KAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;gBAC/C,OAAO,QAAQ,CAAC;aACjB,CAAC;iBACD,KAAK,CAAC,UAAC,CAAc;gBACpB,KAAI,CAAC,eAAe,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;gBACpC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO;oBAAE,MAAM,CAAC,CAAC;aAClC,CAAC,CAAC;SACN,CAAC;QAEM,YAAM,GAAG,UAAC,OAA2C;YACrD,IAAA,gBAQQ,EAPZ,sBAAQ,EACR,wBAAS,EACT,0CAAkB,EAClB,kBAAM,EACN,eAAY,EAAZ,iCAAY,EACZ,2BAA2B,EAA3B,gDAA2B,EAC3B,4BACY,CAAC;YACf,IAAM,aAAa,gBAAQ,OAAO,CAAE,CAAC;YAErC,IAAI,cAAc,GAAG,aAAa,CAAC,cAAc,IAAI,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAS/E,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;gBAC5E,cAAc,GAAI,cAAsB,CAAC,GAAG,CAAC,UAAC,CAA4B;oBACxE,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAI,CAAC,OAAO,CAAC,UAAU;wBAClD,OAAO,KAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBAC7C,OAAO,CAAC,CAAC;iBACV,CAAC,CAAC;gBACH,OAAO,aAAa,CAAC,cAAc,CAAC;aACrC;YAED,IAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;YAC9E,OAAO,aAAa,CAAC,SAAS,CAAC;YAE/B,OAAO,KAAI,CAAC,MAAM,CAAC,MAAM,YACvB,QAAQ,UAAA;gBACR,kBAAkB,oBAAA;gBAClB,cAAc,gBAAA;gBACd,mBAAmB,qBAAA;gBACnB,MAAM,QAAA;gBACN,OAAO,SAAA;gBACP,WAAW,aAAA,EACX,SAAS,EAAE,eAAe,IACvB,aAAa,EAChB,CAAC;SACJ,CAAC;QAEM,qBAAe,GAAG;YACxB,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,EAAE;gBACpD,KAAI,CAAC,QAAQ,CAAC;oBACZ,OAAO,EAAE,IAAI;oBACb,KAAK,EAAE,SAAS;oBAChB,IAAI,EAAE,SAAS;oBACf,MAAM,EAAE,IAAI;iBACb,CAAC,CAAC;aACJ;SACF,CAAC;QAEM,yBAAmB,GAAG,UAAC,QAAgC,EAAE,UAAkB;YAC3E,IAAA,gBAA2C,EAAzC,4BAAW,EAAE,gCAA4B,CAAC;YAE1C,IAAA,oBAAI,EAAE,wBAAM,CAAc;YAClC,IAAM,KAAK,GACT,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,GAAG,SAAS,CAAC;YAEvF,IAAM,cAAc,GAAG,cAAM,QAAC,WAAW,GAAG,WAAW,CAAC,IAAa,CAAC,GAAG,IAAI,IAAC,CAAC;YAE/E,IAAI,KAAI,CAAC,UAAU,IAAI,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE;gBAC9E,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,MAAA,EAAE,KAAK,OAAA,EAAE,EAAE,cAAc,CAAC,CAAC;aAChE;iBAAM;gBACL,cAAc,EAAE,CAAC;aAClB;SACF,CAAC;QAEM,qBAAe,GAAG,UAAC,KAAkB,EAAE,UAAkB;YACvD,IAAA,6BAAO,CAAgB;YAC/B,IAAM,WAAW,GAAG,cAAM,QAAC,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,IAAC,CAAC;YAE5D,IAAI,KAAI,CAAC,UAAU,IAAI,KAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;gBAC5D,KAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,OAAA,EAAE,EAAE,WAAW,CAAC,CAAC;aACvD;iBAAM;gBACL,WAAW,EAAE,CAAC;aACf;SACF,CAAC;QAEM,2BAAqB,GAAG;YAC9B,KAAI,CAAC,oBAAoB,GAAG,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;YAC1D,OAAO,KAAI,CAAC,oBAAoB,CAAC;SAClC,CAAC;QAEM,0BAAoB,GAAG,UAAC,UAAkB;YAChD,OAAO,KAAI,CAAC,oBAAoB,KAAK,UAAU,CAAC;SACjD,CAAC;QAEM,8BAAwB,GAAG,UAAC,QAAsB;YACxD,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;YACnC,oBACY,8BAA8B;SAK3C,CAAC;QApKA,KAAI,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,KAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC9C,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC;;KAC3B;IAED,oCAAiB,GAAjB;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KACxB;IAED,uCAAoB,GAApB;QACE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;IAED,4CAAyB,GAAzB,UACE,SAA2C,EAC3C,WAA4B;QAE5B,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QACrD,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YACrE,OAAO;SACR;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,EAAE;YAC9C,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;SACnD;QAED,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;SAC7B;KACF;IAED,yBAAM,GAAN;QACU,IAAA,8BAAQ,CAAgB;QAC1B,IAAA,eAA6C,EAA3C,oBAAO,EAAE,cAAI,EAAE,gBAAK,EAAE,kBAAqB,CAAC;QAEpD,IAAM,MAAM,GAAG;YACb,MAAM,QAAA;YACN,OAAO,SAAA;YACP,IAAI,MAAA;YACJ,KAAK,OAAA;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;QAEF,OAAO,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;KAC3C;IA1EM,qBAAY,GAAG;QACpB,MAAM,EAAEF,MAAgB;QACxB,UAAU,EAAEA,MAAgB;KAC7B,CAAC;IAEK,kBAAS,GAAG;QACjB,QAAQ,EAAEA,MAAgB,CAAC,UAAU;QACrC,SAAS,EAAEA,MAAgB;QAC3B,kBAAkB,EAAEA,MAAgB;QACpC,cAAc,EAAEQ,SAAmB,CAAC;YAClCC,OAAiB,CAACD,SAAmB,CAAC,CAACJ,MAAgB,EAAEJ,MAAgB,CAAC,CAAC,CAAC;YAC5EC,IAAc;SACf,CAAC;QACF,mBAAmB,EAAEI,IAAc;QACnC,MAAM,EAAEJ,IAAc;QACtB,QAAQ,EAAEA,IAAc,CAAC,UAAU;QACnC,WAAW,EAAEA,IAAc;QAC3B,OAAO,EAAEA,IAAc;QACvB,WAAW,EAAEG,MAAgB;KAC9B,CAAC;IA8KJ,eAAC;CArMD,CAAqEG,SAAe,GAqMnF;;ACxPD;IAA0DL,gCAGzD;IAkBC,sBAAY,KAA2C,EAAE,OAA4B;QAArF,YACE,kBAAM,KAAK,EAAE,OAAO,CAAC,SAKtB;QAsDO,gBAAU,GAAG,UAAC,KAA2C;YAC/D,IAAI,KAAI,CAAC,eAAe;gBAAE,OAAO;YACjC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC3C,KAAK,EAAE,KAAK,CAAC,YAAY;gBACzB,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,WAAW,EAAE,KAAK,CAAC,WAAW;aAC/B,CAAC,CAAC;SACJ,CAAC;QAEM,uBAAiB,GAAG;YAC1B,IAAI,KAAI,CAAC,iBAAiB;gBAAE,OAAO;YACnC,KAAI,CAAC,iBAAiB,GAAG,KAAI,CAAC,eAAgB,CAAC,SAAS,CAAC;gBACvD,IAAI,EAAE,KAAI,CAAC,iBAAiB;gBAC5B,KAAK,EAAE,KAAI,CAAC,WAAW;gBACvB,QAAQ,EAAE,KAAI,CAAC,oBAAoB;aACpC,CAAC,CAAC;SACJ,CAAC;QAEM,qBAAe,GAAG,cAAM,QAAC;YAC/B,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,SAAS;YAChB,IAAI,EAAE,SAAS;SAChB,IAAC,CAAC;QAEK,uBAAiB,GAAG,UAAC,MAAiC;YACtD,IAAA,UAGE,EAFN,kBAAM,EACG,gDACH,CAAC;YACT,KAAI,CAAC,QAAQ,CAAC;gBACZ,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,SAAS;aACjB,CAAC,CAAC;YACH,IAAI,kBAAkB;gBAAE,kBAAkB,CAAC,EAAE,MAAM,QAAA,EAAE,gBAAgB,EAAE,MAAM,EAAE,CAAC,CAAC;SAClF,CAAC;QAEM,iBAAW,GAAG,UAAC,KAAU;YAC/B,KAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK,OAAA;gBACL,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;SACJ,CAAC;QAEM,0BAAoB,GAAG;YACrB,IAAA,2DAAsB,CAAgB;YAC9C,IAAI,sBAAsB;gBAAE,sBAAsB,EAAE,CAAC;YACrD,KAAI,CAAC,eAAe,EAAE,CAAC;SACxB,CAAC;QAEM,qBAAe,GAAG;YACxB,IAAI,KAAI,CAAC,iBAAiB,EAAE;gBAC1B,KAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;gBACrC,OAAO,KAAI,CAAC,iBAAiB,CAAC;aAC/B;SACF,CAAC;QAhHA,KAAI,CAAC,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACvB,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,eAAe,EAAE,CAAC;;KACrC;IAED,wCAAiB,GAAjB;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,gDAAyB,GAAzB,UACE,SAA+C,EAC/C,WAAgC;QAEhC,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAErD,IACE,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC;YACvD,IAAI,CAAC,MAAM,KAAK,UAAU;YAC1B,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,SAAS,CAAC,YAAY,EAClD;YACA,OAAO;SACR;QAED,IAAI,iBAAiB,GAAG,SAAS,CAAC,iBAAiB,CAAC;QACpD,IAAI,OAAO,iBAAiB,KAAK,UAAU,EAAE;YAC3C,iBAAiB,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAChE;QACD,IAAM,oBAAoB,GAAG,iBAAiB,KAAK,KAAK,CAAC;QACzD,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,EAAE;YAC9B,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;SAC1B;QAED,IAAI,CAAC,oBAAoB,EAAE;YACzB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC,eAAe,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;YACtC,OAAO;SACR;QACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAC3B,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAED,2CAAoB,GAApB;QACE,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,6BAAM,GAAN;QACE,IAAM,QAAQ,GAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC1C,IAAI,CAAC,QAAQ;YAAE,OAAO,IAAI,CAAC;QAC3B,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;YAC3C,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;SAChC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;KACzB;IA3EM,yBAAY,GAAG;QACpB,MAAM,EAAEF,MAAgB;KACzB,CAAC;IAEK,sBAAS,GAAG;QACjB,YAAY,EAAEA,MAAgB,CAAC,UAAU;QACzC,SAAS,EAAEA,MAAgB;QAC3B,QAAQ,EAAEC,IAAc;QACxB,kBAAkB,EAAEA,IAAc;QAClC,sBAAsB,EAAEA,IAAc;QACtC,iBAAiB,EAAEO,SAAmB,CAAC,CAACP,IAAc,EAAEI,IAAc,CAAC,CAAC;KACzE,CAAC;IA0HJ,mBAAC;CAzID,CAA0DE,SAAe,GAyIxE;;AChLM,IAAM,wBAAwB,GAAG,cAAM,QAAC,EAAE,IAAC,CAAC;AACnD,AACO,IAAM,qBAAqB,GAAG,cAAM,OAAA,KAAK,GAAA,CAAC;AAEjD,SAAgB,cAAc,CAAI,gBAAwC;IACxE,OAAO,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC;CAC7E;AAED,SAAgB,2BAA2B,CAAS,SAA8B,EAAE,KAAa;IAC/F,IAAI,SAAS,GAAuB,EAAE,CAAC;IACvC,KAA+B,UAAmB,EAAnB,KAAA,SAAS,CAAC,SAAS,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;QAA3C,IAAA,WAAkB,EAAhB,sBAAQ,EAAE,cAAI;QACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK;YAAE,SAAS;QAErD,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;QACzC,IAAM,YAAY,GAAI,KAAa,CAAC,YAAY,CAAC,CAAC;QAElD,IAAI,OAAO,YAAY,KAAK,WAAW,EAAE;YACvC,SAAS,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;YACvC,SAAS;SACV;QAGD,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE;YAC/B,SAAS,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;SACrC;KACF;IACD,OAAO,SAAS,CAAC;CAClB;AAKD;IAAoEL,+BAGnE;IAKC,qBAAY,KAAa;QAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;QAPM,aAAO,GAAY,KAAK,CAAC;QAM9B,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;KAC9D;IAED,wCAAkB,GAAlB;QACE,iFAE2D;QAG3D,OAAO,IAAI,CAAC,eAAe,CAAC;KAC7B;IAED,wCAAkB,GAAlB,UAAmB,GAAsC;QACvD,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;KAC5B;IACH,kBAAC;CAAA,CAzBmEK,SAAe,GAyBlF;;SChDe,SAAS,CAMvB,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAGrF,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IAGjC,IAAA,6BAAkC,EAAlC,uDAAkC,EAClC,0BAA4B,EAA5B,iDAA4B,EAC5B,2BAAgB,EAAhB,qCAAgB,CACG;IAErB,IAAI,iBAAiB,GAAG,OAAoC,CAAC;IAC7D,IAAI,OAAO,iBAAiB,KAAK,UAAU,EAAE;QAC3C,iBAAiB,GAAG,cAAM,OAAA,OAAoB,GAAA,CAAC;KAChD;IAED,IAAI,cAAc,GAAG,IAA+B,CAAC;IACrD,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;QACxC,cAAc,GAAG,cAAM,OAAA,IAAW,GAAA,CAAC;KACpC;IAGD,IAAI,eAAmC,CAAC;IACxC,OAAO,UACL,gBAA2D;QAE3D,IAAM,kBAAkB,GAAM,KAAK,SAAI,cAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;QAC3E;YAAsBL,2BAAgC;YAAtD;;aAiEC;YA7DC,wBAAM,GAAN;gBAAA,iBA4DC;gBA3DC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAM,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBACzC,IAAM,IAAI,GAAG,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAQ,iBAAiB,CAAC,KAAK,CAAC,CAAE,CAAC;gBAEhF,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACpE,IAAI,CAAC,SAAS,GAAG,2BAA2B,CAC1C,SAAS,EACT,KAAK,CACN,CAAC;iBACH;gBACD,QACEH,cAAC,KAAK,eACA,IAAI,IACR,WAAW,EAAE,kBAAkB,EAC/B,IAAI,EAAE,UAAU,EAChB,KAAK,EAAE,QAAQ,EACf,kBAAkB,WAEjB,UAAC,EAAyB;;oBAAvB,IAAA,aAAS,EAAE,cAAI,EAAE,kCAAI;oBACvB,IAAI,gBAAgB,CAAC,OAAO,EAAE;wBAC5B,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;wBACpB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;4BAC/B,GAAG,EAAE,KAAI,CAAC,kBAAkB;yBAC7B,CAAC,CAAC;qBACJ;oBAED,IAAI,UAAU,EAAE;wBACd,QACEA,cAAC,gBAAgB,eACX,KAAe,EACf,EAAiB,EACrB,EACF;qBACH;oBAKD,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;oBAC5C,IAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,IAAI,MAAM,CAAC;oBAC7C,IAAI,UAAU,aAAK,GAAC,IAAI,IAAG,MAAM,KAAE,CAAC;oBACpC,IAAI,gBAAgB,CAAC,KAAK,EAAE;wBAC1B,IAAM,SAAS;4BACb,GAAC,IAAI,IAAG,MAAM;4BACd,WAAQ,GAAE,KAAe;+BAC1B,CAAC;wBACF,eAAe,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;wBACrE,UAAU,GAAG,eAAe,CAAC;qBAC9B;oBAED,QACEA,cAAC,gBAAgB,eACX,KAAe,EACf,UAAyB,EAC7B,EACF;iBACH,CACK,EACR;aACH;YA/DM,mBAAW,GAAG,kBAAkB,CAAC;YACjC,wBAAgB,GAAG,gBAAgB,CAAC;YA+D7C,cAAC;SAAA,CAjEqB,WAAW,GAiEhC;QAGD,OAAO,oBAAoB,CAAC,OAAO,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;KAC5D,CAAC;CACH;;SCzGe,YAAY,CAM1B,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAGrF,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IAG3B,IAAA,6BAAkC,EAAlC,uDAAkC,EAAE,2BAAgB,EAAhB,qCAAgB,CAAsB;IAElF,IAAI,iBAAiB,GAAG,OAAuC,CAAC;IAChE,IAAI,OAAO,iBAAiB,KAAK,UAAU;QAAE,iBAAiB,GAAG,cAAM,OAAA,OAAuB,GAAA,CAAC;IAE/F,OAAO,UACL,gBAA2D;QAE3D,IAAM,kBAAkB,GAAM,KAAK,SAAI,cAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;QAC3E;YAAsBG,2BAAgC;YAAtD;;aAkDC;YA/CC,wBAAM,GAAN;gBACE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAM,IAAI,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAEtC,IAAI,gBAAgB,CAAC,OAAO,EAAE;oBAC5B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;oBACpB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;wBAC/B,GAAG,EAAE,IAAI,CAAC,kBAAkB;qBAC7B,CAAC,CAAC;iBACJ;gBACD,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACrD,IAAI,CAAC,SAAS,GAAG,2BAA2B,CAC1C,SAAS,EACT,KAAK,CACN,CAAC;iBACH;gBAED,QACEH,cAAC,QAAQ,eAAK,IAAI,IAAE,QAAQ,EAAE,QAAQ,EAAE,aAAa,WAClD,UAAC,MAAM,EAAE,EAAc;;oBAAZ,IAAA,cAAI,EAAE,wBAAI;oBAKpB,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;oBAC5C,IAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,IAAI,QAAQ,CAAC;oBAC/C,IAAM,UAAU,GAAG,gBAAgB,CAAC,IAAI,GAAM,IAAI,WAAQ,GAAG,QAAQ,CAAC;oBACtE,IAAI,UAAU,aAAK,GAAC,IAAI,IAAG,MAAM,EAAE,GAAC,UAAU,IAAG,MAAM,KAAE,CAAC;oBAC1D,IAAI,gBAAgB,CAAC,KAAK,EAAE;wBAC1B,IAAM,SAAS;4BACb,GAAC,IAAI,IAAG,MAAM;4BACd,GAAC,UAAU,IAAG,MAAM;4BACpB,WAAQ,GAAE,KAAK;+BAChB,CAAC;wBACF,UAAU,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAQ,CAAC;qBACvD;oBAED,QACEA,cAAC,gBAAgB,eACX,KAAe,EACf,UAAyB,EAC7B,EACF;iBACH,CACQ,EACX;aACH;YAhDM,mBAAW,GAAG,kBAAkB,CAAC;YACjC,wBAAgB,GAAG,gBAAgB,CAAC;YAgD7C,cAAC;SAAA,CAlDqB,WAAW,GAkDhC;QAGD,OAAO,oBAAoB,CAAC,OAAO,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;KAC5D,CAAC;CACH;;SC5Ee,gBAAgB,CAM9B,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAGrF,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IAGjC,IAAA,6BAAkC,EAAlC,uDAAkC,EAClC,0BAA4B,EAA5B,iDAA4B,EAC5B,2BAAgB,EAAhB,qCAAgB,EAChB,sDAAiB,CACE;IAErB,IAAI,iBAAiB,GAAG,OAAoC,CAAC;IAC7D,IAAI,OAAO,iBAAiB,KAAK,UAAU;QAAE,iBAAiB,GAAG,cAAM,OAAA,OAAoB,GAAA,CAAC;IAE5F,IAAI,cAAc,GAAG,IAA+B,CAAC;IACrD,IAAI,OAAO,cAAc,KAAK,UAAU;QAAE,cAAc,GAAG,cAAM,OAAA,IAAW,GAAA,CAAC;IAG7E,IAAI,eAAmC,CAAC;IACxC,OAAO,UACL,gBAA2D;QAE3D,IAAM,kBAAkB,GAAM,KAAK,SAAI,cAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;QAC3E;YAAsBG,2BAA0D;YAG9E,iBAAY,KAAa;gBAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;gBADC,KAAI,CAAC,KAAK,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;;aACrC;YACD,2CAAyB,GAAzB,UAA0B,SAAiB;gBACzC,IAAI,CAAC,iBAAiB;oBAAE,OAAO;gBAC/B,IAAI,CAAC,QAAQ,CAAC;oBACZ,WAAW,EAAE,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC;iBACtD,CAAC,CAAC;aACJ;YAED,wBAAM,GAAN;gBAAA,iBA4DC;gBA3DC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,IAAM,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBACzC,IAAM,IAAI,GAAG,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBAEzE,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACpE,IAAI,CAAC,SAAS,GAAG,2BAA2B,CAC1C,SAAS,EACT,KAAK,CACN,CAAC;iBACH;gBACD,QACEH,cAAC,YAAY,eACP,IAAI,IACR,WAAW,EAAE,kBAAkB,EAC/B,IAAI,EAAE,UAAU,EAChB,YAAY,EAAE,QAAQ,EACtB,iBAAiB,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,KAExC,UAAC,EAAc;;oBAAZ,IAAA,cAAI,EAAE,wBAAI;oBACZ,IAAI,gBAAgB,CAAC,OAAO,EAAE;wBAC5B,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;wBACpB,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;4BAC/B,GAAG,EAAE,KAAI,CAAC,kBAAkB;yBAC7B,CAAC,CAAC;qBACJ;oBAED,IAAI,UAAU,EAAE;wBACd,QACEA,cAAC,gBAAgB,eACX,KAAe,EACf,EAAiB,EACrB,EACF;qBACH;oBAKD,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;oBAC5C,IAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,IAAI,MAAM,CAAC;oBAC7C,IAAI,UAAU,aAAK,GAAC,IAAI,IAAG,MAAM,KAAE,CAAC;oBACpC,IAAI,gBAAgB,CAAC,KAAK,EAAE;wBAC1B,IAAM,SAAS;4BACb,GAAC,IAAI,IAAG,MAAM;4BACd,WAAQ,GAAE,KAAe;+BAC1B,CAAC;wBACF,eAAe,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;wBACrE,UAAU,GAAG,eAAe,CAAC;qBAC9B;oBAED,QACEA,cAAC,gBAAgB,eACX,KAAe,EACf,UAAyB,EAC7B,EACF;iBACH,CACY,EACf;aACH;YAzEM,mBAAW,GAAG,kBAAkB,CAAC;YACjC,wBAAgB,GAAG,gBAAgB,CAAC;YAyE7C,cAAC;SAAA,CA3EqB,WAAW,GA2EhC;QAGD,OAAO,oBAAoB,CAAC,OAAO,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;KAC5D,CAAC;CACH;;SCrHe,OAAO,CAOrB,QAAsB,EACtB,gBAAqF;IAArF,iCAAA,EAAA,qBAAqF;IAErF,QAAQ,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI;QAC3B,KAAK,YAAY,CAAC,QAAQ;YACxB,OAAO,YAAY,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAClD,KAAK,YAAY,CAAC,YAAY;YAC5B,OAAO,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;QAGtD,KAAK,YAAY,CAAC,KAAK,CAAC;QACxB;YACE,OAAO,SAAS,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;KAChD;CACF;;ACtBD,SAASW,gBAAc,CAAI,gBAAwC;IACjE,OAAO,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC;CAC7E;AAID,SAAwB,UAAU,CAChC,gBAA+D,EAC/D,gBAAuD;IAAvD,iCAAA,EAAA,qBAAuD;IAEvD,IAAM,eAAe,GAAG,gBAAcA,gBAAc,CAAC,gBAAgB,CAAC,MAAG,CAAC;IAE1E;QAAyBR,8BAAuB;QAO9C,oBAAY,KAAa;YAAzB,YACE,kBAAM,KAAK,CAAC,SAEb;YADC,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;SAC9D;QAED,uCAAkB,GAAlB;YACE;YAKA,OAAO,IAAI,CAAC,eAAe,CAAC;SAC7B;QAED,uCAAkB,GAAlB,UAAmB,GAAkD;YACnE,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;SAC5B;QAED,2BAAM,GAAN;YAAA,iBAYC;YAXC,QACEH,cAAC,cAAc,QACZ,UAAA,MAAM;gBACL,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAI,CAAC,KAAK,EAAE;oBAC1C,MAAM,QAAA;oBACN,GAAG,EAAE,gBAAgB,CAAC,OAAO,GAAG,KAAI,CAAC,kBAAkB,GAAG,SAAS;iBACpE,CAAC,CAAC;gBACH,OAAOA,cAAC,gBAAgB,eAAK,KAAK,EAAI,CAAC;aACxC,CACc,EACjB;SACH;QApCM,sBAAW,GAAG,eAAe,CAAC;QAC9B,2BAAgB,GAAG,gBAAgB,CAAC;QAoC7C,iBAAC;KAtCD,CAAyBQ,SAAe,GAsCvC;IAGD,OAAO,oBAAoB,CAAC,UAAU,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;CAC/D;;ACnDD,SAAS,oBAAoB;IAC3B,OAAO;QACL,IAAI,EAAE,KAAK;QACX,UAAU,EAAE,IAAI;KACjB,CAAC;CACH;AAED;IAAA;QAEU,kBAAa,GAAG,IAAI,GAAG,EAAiC,CAAC;QAMzD,kBAAa,GAAG,IAAI,GAAG,EAAwC,CAAC;KAqEzE;IAlEQ,8CAAqB,GAA5B,UACE,aAAuC,EACvC,UAA4C;QAE5C,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,UAAU,GAAG,UAAU,CAAC;KAC7D;IAGM,yCAAgB,GAAvB,UAA2C,aAAuC;QAChF,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC;KACvD;IAEM,wCAAe,GAAtB,UACE,aAAuC,EACvC,MAA6B;QAE7B,IAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,aAAa,EACb,IAAI,OAAO,CAAC,UAAA,OAAO;gBACjB,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;aACpC,CAAC,CACH,CAAC;YAGF,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,EAAE,CAAC;KACjB;IAEM,oCAAW,GAAlB;QACE,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,CAAC;KACpC;IAEM,gDAAuB,GAA9B;QAAA,iBAiBC;QAhBC,IAAM,QAAQ,GAAmB,EAAE,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,aAAa;YAUhD,KAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;YAChD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACxB,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KAC9B;IAEO,wCAAe,GAAvB,UACE,aAAuC;QAE/B,IAAA,kCAAa,CAAU;QACzB,IAAA,wBAA0C,EAAxC,gBAAK,EAAE,wBAAiC,CAAC;QACjD,IAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,EAAqB,CAAC;QACxE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC;YAAE,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAChE,IAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAClD,IAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,oBAAoB,EAAE,CAAC;QACnE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC;YAAE,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QACpE,OAAO,IAAI,CAAC;KACb;IACH,qBAAC;CAAA,IAAA;SAEuB,eAAe,CACrC,IAAqB,EACrB,OAAoC;IAApC,wBAAA,EAAA,YAAoC;IAEpC,OAAO,iBAAiB,CAAC;QACvB,IAAI,MAAA;QACJ,OAAO,SAAA;QAGP,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,oBAAoB;KACjE,CAAC,CAAC;CACJ;AAQD,SAAgB,iBAAiB,CAAC,EAOP;QANzB,cAAI,EACJ,eAAY,EAAZ,iCAAY,EAIZ,sBAAiE,EAAjE,sFAAiE;IAEjE,IAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;IAE5C;QAAqCL,0CAAe;QAApD;;SAiBC;QAZC,gDAAe,GAAf;YACE,oBAAY,OAAO,IAAE,cAAc,gBAAA,IAAG;SACvC;QAED,uCAAM,GAAN;YAME,OAAO,IAAI,CAAC;SACb;QAfM,wCAAiB,GAA2B;YACjD,cAAc,EAAEF,MAAgB;SACjC,CAAC;QAcJ,6BAAC;KAjBD,CAAqCO,SAAe,GAiBnD;IAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;QAC9B,sBAAsB,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAGI,GAAa,CAAC;KAC/D,CAAC,CAAC;IAEH,SAAS,OAAO;QACd,IAAM,IAAI,GAAG,cAAc,CAACZ,aAAmB,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACzE,OAAO,cAAc,CAAC,WAAW,EAAE;cAC/B,cAAc,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC;cACtD,IAAI,CAAC;KACV;IAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;CACxC;;SC1Je,sBAAsB,CAAC,SAA4B;IACjE,OAAO,iBAAiB,CAAC;QACvB,IAAI,EAAE,SAAS;QACf,cAAc,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,cAAc;KAC3D,CAAC,CAAC;CACJ;;SCRe,OAAO;IAAC,eAAoB;SAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;QAApB,0BAAoB;;IAC1C,IAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;IAClC,OAAO;QAAU,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;QACtB,IAAA,4BAAa,EAAE,kCAAgB,CAAa;QACnD,IAAI,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7C,aAAa,CAAC,OAAO,CAAC,UAAC,GAAG;YACxB,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;SAChC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACf,CAAA;CACF;;;;"}